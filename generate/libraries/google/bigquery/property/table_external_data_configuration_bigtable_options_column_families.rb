# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'google/bigquery/property/table_external_data_configuration_bigtable_options_column_families_columns'
module GoogleInSpec
  module BigQuery
    module Property
      class TableExternalDataConfigurationBigtableOptionsColumnFamilies
        attr_reader :args

        attr_reader :columns

        attr_reader :encoding

        attr_reader :family_id

        attr_reader :only_read_latest

        attr_reader :type

        def initialize(args = nil, parent_identifier = nil)
          @args = args
          return if args.nil?
          @parent_identifier = parent_identifier
          @columns = GoogleInSpec::BigQuery::Property::TableExternalDataConfigurationBigtableOptionsColumnFamiliesColumnsArray.parse(args['columns'], to_s)
          @encoding = args['encoding']
          @family_id = args['familyId']
          @only_read_latest = args['onlyReadLatest']
          @type = args['type']
        end

        def to_s
          "#{@parent_identifier} TableExternalDataConfigurationBigtableOptionsColumnFamilies"
        end

        def self.un_parse(item, path)
          return if item.nil?
          way_to_parse = {
            'columns' => ->(x, path) { x.nil? ? [] : x.map { |single| "its('#{path}.columns') { should include '#{single.to_json}' }" } },
            'encoding' => ->(x, path) { x.nil? ? [] : ["its('#{path}.encoding') { should cmp #{x.inspect} }"] },
            'family_id' => ->(x, path) { x.nil? ? [] : ["its('#{path}.family_id') { should cmp #{x.inspect} }"] },
            'only_read_latest' => ->(x, path) { x.nil? ? [] : ["its('#{path}.only_read_latest') { should cmp #{x.inspect} }"] },
            'type' => ->(x, path) { x.nil? ? [] : ["its('#{path}.type') { should cmp #{x.inspect} }"] },
          }
          way_to_parse.map do |k, v|
            v.call(item.method(k).call, path)
          end
        end

        def to_json
          @args.to_json
        end

        def self.from_json string
          data = JSON.load string
          self.new data
        end

        # other is a string representation of this object
        def ==(other)
          return @args == JSON.load(other)
        end
      end

      class TableExternalDataConfigurationBigtableOptionsColumnFamiliesArray
        def self.parse(value, parent_identifier)
          return if value.nil?
          return TableExternalDataConfigurationBigtableOptionsColumnFamilies.new(value, parent_identifier) unless value.is_a?(::Array)
          value.map { |v| TableExternalDataConfigurationBigtableOptionsColumnFamilies.new(v, parent_identifier) }
        end

        def self.un_parse(arr, path)
          return if arr.nil?
          value.map { |v| TableExternalDataConfigurationBigtableOptionsColumnFamilies.un_parse(v, path) }
        end
      end
    end
  end
end
