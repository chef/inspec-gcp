# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'
class ComputeRegionNetworkEndpointGroups < GcpResourceBase
  name 'google_compute_region_network_endpoint_groups'
  desc 'RegionNetworkEndpointGroup plural resource'
  supports platform: 'gcp'

  attr_reader :table

  filter_table_config = FilterTable.create

  filter_table_config.add(:kinds, field: :kind)
  filter_table_config.add(:ids, field: :id)
  filter_table_config.add(:creation_timestamps, field: :creation_timestamp)
  filter_table_config.add(:self_links, field: :self_link)
  filter_table_config.add(:names, field: :name)
  filter_table_config.add(:descriptions, field: :description)
  filter_table_config.add(:network_endpoint_types, field: :network_endpoint_type)
  filter_table_config.add(:sizes, field: :size)
  filter_table_config.add(:regions, field: :region)
  filter_table_config.add(:zones, field: :zone)
  filter_table_config.add(:networks, field: :network)
  filter_table_config.add(:subnetworks, field: :subnetwork)
  filter_table_config.add(:default_ports, field: :default_port)
  filter_table_config.add(:annotations, field: :annotations)
  filter_table_config.add(:cloud_runs, field: :cloud_run)
  filter_table_config.add(:app_engines, field: :app_engine)
  filter_table_config.add(:cloud_functions, field: :cloud_function)
  filter_table_config.add(:psc_target_services, field: :psc_target_service)
  filter_table_config.add(:psc_data, field: :psc_data)

  filter_table_config.connect(self, :table)

  def initialize(params = {})
    super(params.merge({ use_http_transport: true }))
    @params = params
    @table = fetch_wrapped_resource('items')
  end

  def fetch_wrapped_resource(wrap_path)
    # fetch_resource returns an array of responses (to handle pagination)
    result = @connection.fetch_all(product_url, resource_base_url, @params, 'Get')
    return if result.nil?

    # Conversion of string -> object hash to symbol -> object hash that InSpec needs
    converted = []
    result.each do |response|
      next if response.nil? || !response.key?(wrap_path)
      response[wrap_path].each do |hash|
        hash_with_symbols = {}
        hash.each_key do |key|
          name, value = transform(key, hash)
          hash_with_symbols[name] = value
        end
        converted.push(hash_with_symbols)
      end
    end

    converted
  end

  def transform(key, value)
    return transformers[key].call(value) if transformers.key?(key)

    [key.to_sym, value]
  end

  def transformers
    {
      'kind' => ->(obj) { [:kind, obj['kind']] },
      'id' => ->(obj) { [:id, obj['id']] },
      'creationTimestamp' => ->(obj) { [:creation_timestamp, obj['creationTimestamp']] },
      'selfLink' => ->(obj) { [:self_link, obj['selfLink']] },
      'name' => ->(obj) { [:name, obj['name']] },
      'description' => ->(obj) { [:description, obj['description']] },
      'networkEndpointType' => ->(obj) { [:network_endpoint_type, obj['networkEndpointType']] },
      'size' => ->(obj) { [:size, obj['size']] },
      'region' => ->(obj) { [:region, obj['region']] },
      'zone' => ->(obj) { [:zone, obj['zone']] },
      'network' => ->(obj) { [:network, obj['network']] },
      'subnetwork' => ->(obj) { [:subnetwork, obj['subnetwork']] },
      'defaultPort' => ->(obj) { [:default_port, obj['defaultPort']] },
      'annotations' => ->(obj) { [:annotations, GoogleInSpec::Compute::Property::RegionNetworkEndpointGroupAnnotations.new(obj['annotations'], to_s)] },
      'cloudRun' => ->(obj) { [:cloud_run, GoogleInSpec::Compute::Property::RegionNetworkEndpointGroupCloudRun.new(obj['cloudRun'], to_s)] },
      'appEngine' => ->(obj) { [:app_engine, GoogleInSpec::Compute::Property::RegionNetworkEndpointGroupAppEngine.new(obj['appEngine'], to_s)] },
      'cloudFunction' => ->(obj) { [:cloud_function, GoogleInSpec::Compute::Property::RegionNetworkEndpointGroupCloudFunction.new(obj['cloudFunction'], to_s)] },
      'pscTargetService' => ->(obj) { [:psc_target_service, obj['pscTargetService']] },
      'pscData' => ->(obj) { [:psc_data, GoogleInSpec::Compute::Property::RegionNetworkEndpointGroupPscData.new(obj['pscData'], to_s)] },
    }
  end

  private

  def product_url(_ = nil)
    'https://compute.googleapis.com/compute/v1/'
  end

  def resource_base_url
    'projects/{{project}}/regions/{{region}}/networkEndpointGroups'
  end
end
