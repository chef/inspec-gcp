# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'
class ComputeRegionTargetHttpsProxys < GcpResourceBase
  name 'google_compute_region_target_https_proxies'
  desc 'RegionTargetHttpsProxy plural resource'
  supports platform: 'gcp'

  attr_reader :table

  filter_table_config = FilterTable.create

  filter_table_config.add(:kinds, field: :kind)
  filter_table_config.add(:ids, field: :id)
  filter_table_config.add(:creation_timestamps, field: :creation_timestamp)
  filter_table_config.add(:names, field: :name)
  filter_table_config.add(:descriptions, field: :description)
  filter_table_config.add(:self_links, field: :self_link)
  filter_table_config.add(:self_link_with_ids, field: :self_link_with_id)
  filter_table_config.add(:url_maps, field: :url_map)
  filter_table_config.add(:ssl_certificates, field: :ssl_certificates)
  filter_table_config.add(:certificate_maps, field: :certificate_map)
  filter_table_config.add(:quic_overrides, field: :quic_override)
  filter_table_config.add(:ssl_policies, field: :ssl_policy)
  filter_table_config.add(:regions, field: :region)
  filter_table_config.add(:proxy_binds, field: :proxy_bind)
  filter_table_config.add(:http_filters, field: :http_filters)
  filter_table_config.add(:server_tls_policies, field: :server_tls_policy)
  filter_table_config.add(:authentications, field: :authentication)
  filter_table_config.add(:authorization_policies, field: :authorization_policy)
  filter_table_config.add(:authorizations, field: :authorization)
  filter_table_config.add(:fingerprints, field: :fingerprint)
  filter_table_config.add(:http_keep_alive_timeout_secs, field: :http_keep_alive_timeout_sec)
  filter_table_config.add(:tls_early_data, field: :tls_early_data)

  filter_table_config.connect(self, :table)

  def initialize(params = {})
    super(params.merge({ use_http_transport: true }))
    @params = params
    @table = fetch_wrapped_resource('regionTargetHttpsProxies')
  end

  def fetch_wrapped_resource(wrap_path)
    # fetch_resource returns an array of responses (to handle pagination)
    result = @connection.fetch_all(product_url, resource_base_url, @params, 'Get')
    return if result.nil?

    # Conversion of string -> object hash to symbol -> object hash that InSpec needs
    converted = []
    result.each do |response|
      next if response.nil? || !response.key?(wrap_path)
      response[wrap_path].each do |hash|
        hash_with_symbols = {}
        hash.each_key do |key|
          name, value = transform(key, hash)
          hash_with_symbols[name] = value
        end
        converted.push(hash_with_symbols)
      end
    end

    converted
  end

  def transform(key, value)
    return transformers[key].call(value) if transformers.key?(key)

    [key.to_sym, value]
  end

  def transformers
    {
      'kind' => ->(obj) { [:kind, obj['kind']] },
      'id' => ->(obj) { [:id, obj['id']] },
      'creationTimestamp' => ->(obj) { [:creation_timestamp, obj['creationTimestamp']] },
      'name' => ->(obj) { [:name, obj['name']] },
      'description' => ->(obj) { [:description, obj['description']] },
      'selfLink' => ->(obj) { [:self_link, obj['selfLink']] },
      'selfLinkWithId' => ->(obj) { [:self_link_with_id, obj['selfLinkWithId']] },
      'urlMap' => ->(obj) { [:url_map, obj['urlMap']] },
      'sslCertificates' => ->(obj) { [:ssl_certificates, obj['sslCertificates']] },
      'certificateMap' => ->(obj) { [:certificate_map, obj['certificateMap']] },
      'quicOverride' => ->(obj) { [:quic_override, obj['quicOverride']] },
      'sslPolicy' => ->(obj) { [:ssl_policy, obj['sslPolicy']] },
      'region' => ->(obj) { [:region, obj['region']] },
      'proxyBind' => ->(obj) { [:proxy_bind, obj['proxyBind']] },
      'httpFilters' => ->(obj) { [:http_filters, obj['httpFilters']] },
      'serverTlsPolicy' => ->(obj) { [:server_tls_policy, obj['serverTlsPolicy']] },
      'authentication' => ->(obj) { [:authentication, obj['authentication']] },
      'authorizationPolicy' => ->(obj) { [:authorization_policy, obj['authorizationPolicy']] },
      'authorization' => ->(obj) { [:authorization, obj['authorization']] },
      'fingerprint' => ->(obj) { [:fingerprint, obj['fingerprint']] },
      'httpKeepAliveTimeoutSec' => ->(obj) { [:http_keep_alive_timeout_sec, obj['httpKeepAliveTimeoutSec']] },
      'tlsEarlyData' => ->(obj) { [:tls_early_data, obj['tlsEarlyData']] },
    }
  end

  private

  def product_url(_ = nil)
    'https://compute.googleapis.com/compute/v1/'
  end

  def resource_base_url
    'projects/{{project}}/regions/{{region}}/targetHttpsProxies'
  end
end
