# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'
class VertexAIStudiesTrials < GcpResourceBase
  name 'google_vertex_ai_studies_trials'
  desc 'StudiesTrial plural resource'
  supports platform: 'gcp'

  attr_reader :table

  filter_table_config = FilterTable.create

  filter_table_config.add(:measurements, field: :measurements)
  filter_table_config.add(:start_times, field: :start_time)
  filter_table_config.add(:end_times, field: :end_time)
  filter_table_config.add(:parameters, field: :parameters)
  filter_table_config.add(:names, field: :name)
  filter_table_config.add(:infeasible_reasons, field: :infeasible_reason)
  filter_table_config.add(:final_measurements, field: :final_measurement)
  filter_table_config.add(:client_ids, field: :client_id)
  filter_table_config.add(:custom_jobs, field: :custom_job)
  filter_table_config.add(:states, field: :state)
  filter_table_config.add(:web_access_uris, field: :web_access_uris)
  filter_table_config.add(:ids, field: :id)

  filter_table_config.connect(self, :table)

  def initialize(params = {})
    super(params.merge({ use_http_transport: true }))
    @params = params
    @table = fetch_wrapped_resource('trials')
  end

  def fetch_wrapped_resource(wrap_path)
    # fetch_resource returns an array of responses (to handle pagination)
    result = @connection.fetch_all(product_url, resource_base_url, @params, 'Get')
    return if result.nil?

    # Conversion of string -> object hash to symbol -> object hash that InSpec needs
    converted = []
    result.each do |response|
      next if response.nil? || !response.key?(wrap_path)
      response[wrap_path].each do |hash|
        hash_with_symbols = {}
        hash.each_key do |key|
          name, value = transform(key, hash)
          hash_with_symbols[name] = value
        end
        converted.push(hash_with_symbols)
      end
    end

    converted
  end

  def transform(key, value)
    return transformers[key].call(value) if transformers.key?(key)

    [key.to_sym, value]
  end

  def transformers
    {
      'measurements' => ->(obj) { return :measurements, GoogleInSpec::VertexAI::Property::StudiesTrialMeasurementsArray.parse(obj['measurements'], to_s) },
      'startTime' => ->(obj) { return :start_time, obj['startTime'] },
      'endTime' => ->(obj) { return :end_time, obj['endTime'] },
      'parameters' => ->(obj) { return :parameters, GoogleInSpec::VertexAI::Property::StudiesTrialParametersArray.parse(obj['parameters'], to_s) },
      'name' => ->(obj) { return :name, obj['name'] },
      'infeasibleReason' => ->(obj) { return :infeasible_reason, obj['infeasibleReason'] },
      'finalMeasurement' => ->(obj) { return :final_measurement, GoogleInSpec::VertexAI::Property::StudiesTrialFinalMeasurement.new(obj['finalMeasurement'], to_s) },
      'clientId' => ->(obj) { return :client_id, obj['clientId'] },
      'customJob' => ->(obj) { return :custom_job, obj['customJob'] },
      'state' => ->(obj) { return :state, obj['state'] },
      'webAccessUris' => ->(obj) { return :web_access_uris, GoogleInSpec::VertexAI::Property::StudiesTrialWebAccessUris.new(obj['webAccessUris'], to_s) },
      'id' => ->(obj) { return :id, obj['id'] },
    }
  end

  private

  def product_url(_ = nil)
    'https://{{region}}-aiplatform.googleapis.com/v1/'
  end

  def resource_base_url
    '{{parent}}/trials'
  end
end
