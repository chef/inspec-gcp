# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'
require 'google/secretmanagerregional/property/secret_customer_managed_encryption'
require 'google/secretmanagerregional/property/secret_rotation'
require 'google/secretmanagerregional/property/secret_topics'

# A provider to manage Secret Manager resources.
class SecretManagerRegionalSecret < GcpResourceBase
  name 'google_secret_manager_regional_secret'
  desc 'Secret'
  supports platform: 'gcp'

  attr_reader :params
  attr_reader :name
  attr_reader :create_time
  attr_reader :annotations
  attr_reader :labels
  attr_reader :topics
  attr_reader :expire_time
  attr_reader :customer_managed_encryption
  attr_reader :version_destroy_ttl
  attr_reader :version_aliases
  attr_reader :rotation

  def initialize(params)
    super(params.merge({ use_http_transport: true }))
    @params = params
    @fetched = @connection.fetch(product_url(params[:beta]), resource_base_url, params, 'Get')
    parse unless @fetched.nil?
  end

  def parse
    @name = @fetched['name']
    @create_time = @fetched['createTime']
    @annotations = @fetched['annotations']
    @labels = @fetched['labels']
    @topics = GoogleInSpec::SecretManagerRegional::Property::SecretTopicsArray.parse(@fetched['topics'], to_s)
    @expire_time = @fetched['expireTime']
    @customer_managed_encryption = GoogleInSpec::SecretManagerRegional::Property::SecretCustomerManagedEncryptionArray.parse(@fetched['customerManagedEncryption'], to_s)
    @version_destroy_ttl = @fetched['versionDestroyTtl']
    @version_aliases = @fetched['versionAliases']
    @rotation = GoogleInSpec::SecretManagerRegional::Property::SecretRotation.new(@fetched['rotation'], to_s)
  end

  def exists?
    !@fetched.nil?
  end

  def to_s
    "Secret #{@params[:name]}"
  end

  private

  def product_url(_ = nil)
    'https://secretmanager.{{region}}.rep.googleapis.com/v1/'
  end

  def resource_base_url
    '{{name}}'
  end
end
