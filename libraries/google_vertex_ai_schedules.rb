# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'
class VertexAISchedules < GcpResourceBase
  name 'google_vertex_ai_schedules'
  desc 'Schedule plural resource'
  supports platform: 'gcp'

  attr_reader :table

  filter_table_config = FilterTable.create

  filter_table_config.add(:started_run_counts, field: :started_run_count)
  filter_table_config.add(:allow_queueings, field: :allow_queueing)
  filter_table_config.add(:names, field: :name)
  filter_table_config.add(:crons, field: :cron)
  filter_table_config.add(:last_pause_times, field: :last_pause_time)
  filter_table_config.add(:create_times, field: :create_time)
  filter_table_config.add(:start_times, field: :start_time)
  filter_table_config.add(:max_run_counts, field: :max_run_count)
  filter_table_config.add(:next_run_times, field: :next_run_time)
  filter_table_config.add(:update_times, field: :update_time)
  filter_table_config.add(:last_scheduled_run_responses, field: :last_scheduled_run_response)
  filter_table_config.add(:last_resume_times, field: :last_resume_time)
  filter_table_config.add(:max_concurrent_run_counts, field: :max_concurrent_run_count)
  filter_table_config.add(:states, field: :state)
  filter_table_config.add(:create_pipeline_job_requests, field: :create_pipeline_job_request)
  filter_table_config.add(:display_names, field: :display_name)
  filter_table_config.add(:catch_ups, field: :catch_up)
  filter_table_config.add(:end_times, field: :end_time)

  filter_table_config.connect(self, :table)

  def initialize(params = {})
    super(params.merge({ use_http_transport: true }))
    @params = params
    @table = fetch_wrapped_resource('schedules')
  end

  def fetch_wrapped_resource(wrap_path)
    # fetch_resource returns an array of responses (to handle pagination)
    result = @connection.fetch_all(product_url, resource_base_url, @params, 'Get')
    return if result.nil?

    # Conversion of string -> object hash to symbol -> object hash that InSpec needs
    converted = []
    result.each do |response|
      next if response.nil? || !response.key?(wrap_path)
      response[wrap_path].each do |hash|
        hash_with_symbols = {}
        hash.each_key do |key|
          name, value = transform(key, hash)
          hash_with_symbols[name] = value
        end
        converted.push(hash_with_symbols)
      end
    end

    converted
  end

  def transform(key, value)
    return transformers[key].call(value) if transformers.key?(key)

    [key.to_sym, value]
  end

  def transformers
    {
      'startedRunCount' => ->(obj) { return :started_run_count, obj['startedRunCount'] },
      'allowQueueing' => ->(obj) { return :allow_queueing, obj['allowQueueing'] },
      'name' => ->(obj) { return :name, obj['name'] },
      'cron' => ->(obj) { return :cron, obj['cron'] },
      'lastPauseTime' => ->(obj) { return :last_pause_time, obj['lastPauseTime'] },
      'createTime' => ->(obj) { return :create_time, obj['createTime'] },
      'startTime' => ->(obj) { return :start_time, obj['startTime'] },
      'maxRunCount' => ->(obj) { return :max_run_count, obj['maxRunCount'] },
      'nextRunTime' => ->(obj) { return :next_run_time, obj['nextRunTime'] },
      'updateTime' => ->(obj) { return :update_time, obj['updateTime'] },
      'lastScheduledRunResponse' => ->(obj) { return :last_scheduled_run_response, GoogleInSpec::VertexAI::Property::ScheduleLastScheduledRunResponse.new(obj['lastScheduledRunResponse'], to_s) },
      'lastResumeTime' => ->(obj) { return :last_resume_time, obj['lastResumeTime'] },
      'maxConcurrentRunCount' => ->(obj) { return :max_concurrent_run_count, obj['maxConcurrentRunCount'] },
      'state' => ->(obj) { return :state, obj['state'] },
      'createPipelineJobRequest' => ->(obj) { return :create_pipeline_job_request, GoogleInSpec::VertexAI::Property::ScheduleCreatePipelineJobRequest.new(obj['createPipelineJobRequest'], to_s) },
      'displayName' => ->(obj) { return :display_name, obj['displayName'] },
      'catchUp' => ->(obj) { return :catch_up, obj['catchUp'] },
      'endTime' => ->(obj) { return :end_time, obj['endTime'] },
    }
  end

  private

  def product_url(_ = nil)
    'https://{{region}}-aiplatform.googleapis.com/v1/'
  end

  def resource_base_url
    '{{parent}}/schedules'
  end
end
