# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'
class KMSCryptoKeyVersions < GcpResourceBase
  name 'google_kms_crypto_key_versions'
  desc 'CryptoKeyVersion plural resource'
  supports platform: 'gcp'

  attr_reader :table

  filter_table_config = FilterTable.create

  filter_table_config.add(:names, field: :name)
  filter_table_config.add(:create_times, field: :create_time)
  filter_table_config.add(:generate_times, field: :generate_time)
  filter_table_config.add(:destroy_times, field: :destroy_time)
  filter_table_config.add(:destroy_event_times, field: :destroy_event_time)
  filter_table_config.add(:states, field: :state)
  filter_table_config.add(:protection_levels, field: :protection_level)
  filter_table_config.add(:algorithms, field: :algorithm)
  filter_table_config.add(:attestations, field: :attestation)
  filter_table_config.add(:import_jobs, field: :import_job)
  filter_table_config.add(:import_times, field: :import_time)
  filter_table_config.add(:import_failure_reasons, field: :import_failure_reason)
  filter_table_config.add(:external_protection_level_options, field: :external_protection_level_options)
  filter_table_config.add(:reimport_eligibles, field: :reimport_eligible)
  filter_table_config.add(:key_rings, field: :key_ring)
  filter_table_config.add(:crypto_keys, field: :crypto_key)

  filter_table_config.connect(self, :table)

  def initialize(params = {})
    super(params.merge({ use_http_transport: true }))
    @params = params
    @table = fetch_wrapped_resource('cryptoKeyVersions')
  end

  def fetch_wrapped_resource(wrap_path)
    # fetch_resource returns an array of responses (to handle pagination)
    result = @connection.fetch_all(product_url, resource_base_url, @params, 'Get')
    return if result.nil?

    # Conversion of string -> object hash to symbol -> object hash that InSpec needs
    converted = []
    result.each do |response|
      next if response.nil? || !response.key?(wrap_path)
      response[wrap_path].each do |hash|
        hash_with_symbols = {}
        hash.each_key do |key|
          name, value = transform(key, hash)
          hash_with_symbols[name] = value
        end
        converted.push(hash_with_symbols)
      end
    end

    converted
  end

  def transform(key, value)
    return transformers[key].call(value) if transformers.key?(key)

    [key.to_sym, value]
  end

  def transformers
    {
      'name' => ->(obj) { [:name, obj['name']] },
      'createTime' => ->(obj) { [:create_time, parse_time_string(obj['createTime'])] },
      'generateTime' => ->(obj) { [:generate_time, parse_time_string(obj['generateTime'])] },
      'destroyTime' => ->(obj) { [:destroy_time, parse_time_string(obj['destroyTime'])] },
      'destroyEventTime' => ->(obj) { [:destroy_event_time, parse_time_string(obj['destroyEventTime'])] },
      'state' => ->(obj) { [:state, obj['state']] },
      'protectionLevel' => ->(obj) { [:protection_level, obj['protectionLevel']] },
      'algorithm' => ->(obj) { [:algorithm, obj['algorithm']] },
      'attestation' => ->(obj) { [:attestation, GoogleInSpec::KMS::Property::CryptoKeyVersionAttestation.new(obj['attestation'], to_s)] },
      'importJob' => ->(obj) { [:import_job, obj['importJob']] },
      'importTime' => ->(obj) { [:import_time, parse_time_string(obj['importTime'])] },
      'importFailureReason' => ->(obj) { [:import_failure_reason, obj['importFailureReason']] },
      'externalProtectionLevelOptions' => ->(obj) { [:external_protection_level_options, GoogleInSpec::KMS::Property::CryptoKeyVersionExternalProtectionLevelOptions.new(obj['externalProtectionLevelOptions'], to_s)] },
      'reimportEligible' => ->(obj) { [:reimport_eligible, obj['reimportEligible']] },
      'keyRing' => ->(obj) { [:key_ring, obj['keyRing']] },
      'cryptoKey' => ->(obj) { [:crypto_key, obj['cryptoKey']] },
    }
  end

  # Handles parsing RFC3339 time string
  def parse_time_string(time_string)
    time_string ? Time.parse(time_string) : nil
  end

  private

  def product_url(_ = nil)
    'https://cloudkms.googleapis.com/v1/'
  end

  def resource_base_url
    'projects/{{project}}/locations/{{location}}/keyRings/{{key_ring}}/cryptoKeys/{{crypto_key}}/cryptoKeyVersions'
  end
end
