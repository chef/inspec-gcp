# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'
class VertexAIDataLabelingJobs < GcpResourceBase
  name 'google_vertex_ai_data_labeling_jobs'
  desc 'DataLabelingJob plural resource'
  supports platform: 'gcp'

  attr_reader :table

  filter_table_config = FilterTable.create

  filter_table_config.add(:labeling_progresses, field: :labeling_progress)
  filter_table_config.add(:create_times, field: :create_time)
  filter_table_config.add(:encryption_specs, field: :encryption_spec)
  filter_table_config.add(:inputs_schema_uris, field: :inputs_schema_uri)
  filter_table_config.add(:labeler_counts, field: :labeler_count)
  filter_table_config.add(:errors, field: :error)
  filter_table_config.add(:inputs, field: :inputs)
  filter_table_config.add(:instruction_uris, field: :instruction_uri)
  filter_table_config.add(:update_times, field: :update_time)
  filter_table_config.add(:annotation_labels, field: :annotation_labels)
  filter_table_config.add(:names, field: :name)
  filter_table_config.add(:current_spends, field: :current_spend)
  filter_table_config.add(:specialist_pools, field: :specialist_pools)
  filter_table_config.add(:display_names, field: :display_name)
  filter_table_config.add(:states, field: :state)
  filter_table_config.add(:datasets, field: :datasets)
  filter_table_config.add(:labels, field: :labels)
  filter_table_config.add(:active_learning_configs, field: :active_learning_config)

  filter_table_config.connect(self, :table)

  def initialize(params = {})
    super(params.merge({ use_http_transport: true }))
    @params = params
    @table = fetch_wrapped_resource('dataLabelingJobs')
  end

  def fetch_wrapped_resource(wrap_path)
    # fetch_resource returns an array of responses (to handle pagination)
    result = @connection.fetch_all(product_url, resource_base_url, @params, 'Get')
    return if result.nil?

    # Conversion of string -> object hash to symbol -> object hash that InSpec needs
    converted = []
    result.each do |response|
      next if response.nil? || !response.key?(wrap_path)
      response[wrap_path].each do |hash|
        hash_with_symbols = {}
        hash.each_key do |key|
          name, value = transform(key, hash)
          hash_with_symbols[name] = value
        end
        converted.push(hash_with_symbols)
      end
    end

    converted
  end

  def transform(key, value)
    return transformers[key].call(value) if transformers.key?(key)

    [key.to_sym, value]
  end

  def transformers
    {
      'labelingProgress' => ->(obj) { return :labeling_progress, obj['labelingProgress'] },
      'createTime' => ->(obj) { return :create_time, obj['createTime'] },
      'encryptionSpec' => ->(obj) { return :encryption_spec, GoogleInSpec::VertexAI::Property::DataLabelingJobEncryptionSpec.new(obj['encryptionSpec'], to_s) },
      'inputsSchemaUri' => ->(obj) { return :inputs_schema_uri, obj['inputsSchemaUri'] },
      'labelerCount' => ->(obj) { return :labeler_count, obj['labelerCount'] },
      'error' => ->(obj) { return :error, GoogleInSpec::VertexAI::Property::DataLabelingJobError.new(obj['error'], to_s) },
      'inputs' => ->(obj) { return :inputs, obj['inputs'] },
      'instructionUri' => ->(obj) { return :instruction_uri, obj['instructionUri'] },
      'updateTime' => ->(obj) { return :update_time, obj['updateTime'] },
      'annotationLabels' => ->(obj) { return :annotation_labels, GoogleInSpec::VertexAI::Property::DataLabelingJobAnnotationLabels.new(obj['annotationLabels'], to_s) },
      'name' => ->(obj) { return :name, obj['name'] },
      'currentSpend' => ->(obj) { return :current_spend, GoogleInSpec::VertexAI::Property::DataLabelingJobCurrentSpend.new(obj['currentSpend'], to_s) },
      'specialistPools' => ->(obj) { return :specialist_pools, obj['specialistPools'] },
      'displayName' => ->(obj) { return :display_name, obj['displayName'] },
      'state' => ->(obj) { return :state, obj['state'] },
      'datasets' => ->(obj) { return :datasets, obj['datasets'] },
      'labels' => ->(obj) { return :labels, GoogleInSpec::VertexAI::Property::DataLabelingJobLabels.new(obj['labels'], to_s) },
      'activeLearningConfig' => ->(obj) { return :active_learning_config, GoogleInSpec::VertexAI::Property::DataLabelingJobActiveLearningConfig.new(obj['activeLearningConfig'], to_s) },
    }
  end

  private

  def product_url(_ = nil)
    'https://{{region}}-aiplatform.googleapis.com/v1/'
  end

  def resource_base_url
    '{{parent}}/dataLabelingJobs'
  end
end
