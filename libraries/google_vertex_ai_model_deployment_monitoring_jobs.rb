# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'
class VertexAIModelDeploymentMonitoringJobs < GcpResourceBase
  name 'google_vertex_ai_model_deployment_monitoring_jobs'
  desc 'ModelDeploymentMonitoringJob plural resource'
  supports platform: 'gcp'

  attr_reader :table

  filter_table_config = FilterTable.create

  filter_table_config.add(:model_deployment_monitoring_objective_configs, field: :model_deployment_monitoring_objective_configs)
  filter_table_config.add(:labels, field: :labels)
  filter_table_config.add(:states, field: :state)
  filter_table_config.add(:analysis_instance_schema_uris, field: :analysis_instance_schema_uri)
  filter_table_config.add(:enable_monitoring_pipeline_logs, field: :enable_monitoring_pipeline_logs)
  filter_table_config.add(:endpoints, field: :endpoint)
  filter_table_config.add(:logging_sampling_strategies, field: :logging_sampling_strategy)
  filter_table_config.add(:bigquery_tables, field: :bigquery_tables)
  filter_table_config.add(:display_names, field: :display_name)
  filter_table_config.add(:schedule_states, field: :schedule_state)
  filter_table_config.add(:errors, field: :error)
  filter_table_config.add(:model_monitoring_alert_configs, field: :model_monitoring_alert_config)
  filter_table_config.add(:latest_monitoring_pipeline_metadata, field: :latest_monitoring_pipeline_metadata)
  filter_table_config.add(:sample_predict_instances, field: :sample_predict_instance)
  filter_table_config.add(:predict_instance_schema_uris, field: :predict_instance_schema_uri)
  filter_table_config.add(:next_schedule_times, field: :next_schedule_time)
  filter_table_config.add(:create_times, field: :create_time)
  filter_table_config.add(:log_ttls, field: :log_ttl)
  filter_table_config.add(:stats_anomalies_base_directories, field: :stats_anomalies_base_directory)
  filter_table_config.add(:update_times, field: :update_time)
  filter_table_config.add(:model_deployment_monitoring_schedule_configs, field: :model_deployment_monitoring_schedule_config)
  filter_table_config.add(:encryption_specs, field: :encryption_spec)
  filter_table_config.add(:names, field: :name)

  filter_table_config.connect(self, :table)

  def initialize(params = {})
    super(params.merge({ use_http_transport: true }))
    @params = params
    @table = fetch_wrapped_resource('modelDeploymentMonitoringJobs')
  end

  def fetch_wrapped_resource(wrap_path)
    # fetch_resource returns an array of responses (to handle pagination)
    result = @connection.fetch_all(product_url, resource_base_url, @params, 'Get')
    return if result.nil?

    # Conversion of string -> object hash to symbol -> object hash that InSpec needs
    converted = []
    result.each do |response|
      next if response.nil? || !response.key?(wrap_path)
      response[wrap_path].each do |hash|
        hash_with_symbols = {}
        hash.each_key do |key|
          name, value = transform(key, hash)
          hash_with_symbols[name] = value
        end
        converted.push(hash_with_symbols)
      end
    end

    converted
  end

  def transform(key, value)
    return transformers[key].call(value) if transformers.key?(key)

    [key.to_sym, value]
  end

  def transformers
    {
      'modelDeploymentMonitoringObjectiveConfigs' => ->(obj) { [:model_deployment_monitoring_objective_configs, GoogleInSpec::VertexAI::Property::ModelDeploymentMonitoringJobModelDeploymentMonitoringObjectiveConfigsArray.parse(obj['modelDeploymentMonitoringObjectiveConfigs'], to_s)] },
      'labels' => ->(obj) { [:labels, GoogleInSpec::VertexAI::Property::ModelDeploymentMonitoringJobLabels.new(obj['labels'], to_s)] },
      'state' => ->(obj) { [:state, obj['state']] },
      'analysisInstanceSchemaUri' => ->(obj) { [:analysis_instance_schema_uri, obj['analysisInstanceSchemaUri']] },
      'enableMonitoringPipelineLogs' => ->(obj) { [:enable_monitoring_pipeline_logs, obj['enableMonitoringPipelineLogs']] },
      'endpoint' => ->(obj) { [:endpoint, obj['endpoint']] },
      'loggingSamplingStrategy' => ->(obj) { [:logging_sampling_strategy, GoogleInSpec::VertexAI::Property::ModelDeploymentMonitoringJobLoggingSamplingStrategy.new(obj['loggingSamplingStrategy'], to_s)] },
      'bigqueryTables' => ->(obj) { [:bigquery_tables, GoogleInSpec::VertexAI::Property::ModelDeploymentMonitoringJobBigqueryTablesArray.parse(obj['bigqueryTables'], to_s)] },
      'displayName' => ->(obj) { [:display_name, obj['displayName']] },
      'scheduleState' => ->(obj) { [:schedule_state, obj['scheduleState']] },
      'error' => ->(obj) { [:error, GoogleInSpec::VertexAI::Property::ModelDeploymentMonitoringJobError.new(obj['error'], to_s)] },
      'modelMonitoringAlertConfig' => ->(obj) { [:model_monitoring_alert_config, GoogleInSpec::VertexAI::Property::ModelDeploymentMonitoringJobModelMonitoringAlertConfig.new(obj['modelMonitoringAlertConfig'], to_s)] },
      'latestMonitoringPipelineMetadata' => ->(obj) { [:latest_monitoring_pipeline_metadata, GoogleInSpec::VertexAI::Property::ModelDeploymentMonitoringJobLatestMonitoringPipelineMetadata.new(obj['latestMonitoringPipelineMetadata'], to_s)] },
      'samplePredictInstance' => ->(obj) { [:sample_predict_instance, obj['samplePredictInstance']] },
      'predictInstanceSchemaUri' => ->(obj) { [:predict_instance_schema_uri, obj['predictInstanceSchemaUri']] },
      'nextScheduleTime' => ->(obj) { [:next_schedule_time, obj['nextScheduleTime']] },
      'createTime' => ->(obj) { [:create_time, obj['createTime']] },
      'logTtl' => ->(obj) { [:log_ttl, obj['logTtl']] },
      'statsAnomaliesBaseDirectory' => ->(obj) { [:stats_anomalies_base_directory, GoogleInSpec::VertexAI::Property::ModelDeploymentMonitoringJobStatsAnomaliesBaseDirectory.new(obj['statsAnomaliesBaseDirectory'], to_s)] },
      'updateTime' => ->(obj) { [:update_time, obj['updateTime']] },
      'modelDeploymentMonitoringScheduleConfig' => ->(obj) { [:model_deployment_monitoring_schedule_config, GoogleInSpec::VertexAI::Property::ModelDeploymentMonitoringJobModelDeploymentMonitoringScheduleConfig.new(obj['modelDeploymentMonitoringScheduleConfig'], to_s)] },
      'encryptionSpec' => ->(obj) { [:encryption_spec, GoogleInSpec::VertexAI::Property::ModelDeploymentMonitoringJobEncryptionSpec.new(obj['encryptionSpec'], to_s)] },
      'name' => ->(obj) { [:name, obj['name']] },
    }
  end

  private

  def product_url(_ = nil)
    'https://{{region}}-aiplatform.googleapis.com/v1/'
  end

  def resource_base_url
    '{{parent}}/modelDeploymentMonitoringJobs'
  end
end
