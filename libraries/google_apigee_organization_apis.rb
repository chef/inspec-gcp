# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'
class ApigeeOrganizationApis < GcpResourceBase
  name 'google_apigee_organization_apis'
  desc 'OrganizationApi plural resource'
  supports platform: 'gcp'

  attr_reader :table

  filter_table_config = FilterTable.create

  filter_table_config.add(:revisions, field: :revision)
  filter_table_config.add(:latest_revision_ids, field: :latest_revision_id)
  filter_table_config.add(:meta_data, field: :meta_data)
  filter_table_config.add(:api_proxy_types, field: :api_proxy_type)
  filter_table_config.add(:read_onlies, field: :read_only)
  filter_table_config.add(:labels, field: :labels)
  filter_table_config.add(:names, field: :name)

  filter_table_config.connect(self, :table)

  def initialize(params = {})
    super(params.merge({ use_http_transport: true }))
    @params = params
    @table = fetch_wrapped_resource('proxies')
  end

  def fetch_wrapped_resource(wrap_path)
    # fetch_resource returns an array of responses (to handle pagination)
    result = @connection.fetch_all(product_url, resource_base_url, @params, 'Get')
    return if result.nil?

    # Conversion of string -> object hash to symbol -> object hash that InSpec needs
    converted = []
    result.each do |response|
      next if response.nil? || !response.key?(wrap_path)
      response[wrap_path].each do |hash|
        hash_with_symbols = {}
        hash.each_key do |key|
          name, value = transform(key, hash)
          hash_with_symbols[name] = value
        end
        converted.push(hash_with_symbols)
      end
    end

    converted
  end

  def transform(key, value)
    return transformers[key].call(value) if transformers.key?(key)

    [key.to_sym, value]
  end

  def transformers
    {
      'revision' => ->(obj) { [:revision, obj['revision']] },
      'latestRevisionId' => ->(obj) { [:latest_revision_id, obj['latestRevisionId']] },
      'metaData' => ->(obj) { [:meta_data, GoogleInSpec::Apigee::Property::OrganizationApiMetaData.new(obj['metaData'], to_s)] },
      'apiProxyType' => ->(obj) { [:api_proxy_type, obj['apiProxyType']] },
      'readOnly' => ->(obj) { [:read_only, obj['readOnly']] },
      'labels' => ->(obj) { [:labels, GoogleInSpec::Apigee::Property::OrganizationApiLabels.new(obj['labels'], to_s)] },
      'name' => ->(obj) { [:name, obj['name']] },
    }
  end

  private

  def product_url(_ = nil)
    'https://apigee.googleapis.com/v1/'
  end

  def resource_base_url
    '{{parent}}/apis'
  end
end
