# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
module GoogleInSpec
  module VertexAI
    module Property
      class DatasetSavedQueries
        attr_reader :annotation_spec_count

        attr_reader :update_time

        attr_reader :support_automl_training

        attr_reader :metadata

        attr_reader :problem_type

        attr_reader :name

        attr_reader :create_time

        attr_reader :etag

        attr_reader :display_name

        attr_reader :annotation_filter

        def initialize(args = nil, parent_identifier = nil)
          return if args.nil?
          @parent_identifier = parent_identifier
          @annotation_spec_count = args['annotationSpecCount']
          @update_time = args['updateTime']
          @support_automl_training = args['supportAutomlTraining']
          @metadata = args['metadata']
          @problem_type = args['problemType']
          @name = args['name']
          @create_time = args['createTime']
          @etag = args['etag']
          @display_name = args['displayName']
          @annotation_filter = args['annotationFilter']
        end

        def to_s
          "#{@parent_identifier} DatasetSavedQueries"
        end
      end

      class DatasetSavedQueriesArray
        def self.parse(value, parent_identifier)
          return if value.nil?
          return DatasetSavedQueries.new(value, parent_identifier) unless value.is_a?(::Array)
          value.map { |v| DatasetSavedQueries.new(v, parent_identifier) }
        end
      end
    end
  end
end
