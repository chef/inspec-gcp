# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
module GoogleInSpec
  module Compute
    module Property
      class InterconnectExpectedOutages
        attr_reader :name

        attr_reader :description

        attr_reader :source

        attr_reader :state

        attr_reader :issue_type

        attr_reader :affected_circuits

        attr_reader :start_time

        attr_reader :end_time

        def initialize(args = nil, parent_identifier = nil)
          return if args.nil?
          @parent_identifier = parent_identifier
          @name = args['name']
          @description = args['description']
          @source = args['source']
          @state = args['state']
          @issue_type = args['issueType']
          @affected_circuits = args['affectedCircuits']
          @start_time = parse_time_string(args['startTime'])
          @end_time = parse_time_string(args['endTime'])
        end

        def to_s
          "#{@parent_identifier} InterconnectExpectedOutages"
        end

        # Handles parsing RFC3339 time string
        def parse_time_string(time_string)
          time_string ? Time.parse(time_string) : nil
        end
      end

      class InterconnectExpectedOutagesArray
        def self.parse(value, parent_identifier)
          return if value.nil?
          return InterconnectExpectedOutages.new(value, parent_identifier) unless value.is_a?(::Array)
          value.map { |v| InterconnectExpectedOutages.new(v, parent_identifier) }
        end
      end
    end
  end
end
