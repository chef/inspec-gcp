# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'google/dlp/property/dt_config_info_type_tf_tf_info_types'
require 'google/dlp/property/dt_config_info_type_tf_tf_primitive_tf'
require 'google/dlp/property/dt_config_info_type_tf_tf_primitive_tf_character_mask_config'
require 'google/dlp/property/dt_config_info_type_tf_tf_primitive_tf_character_mask_config_characters_to_ignore'
require 'google/dlp/property/dt_config_info_type_tf_tf_primitive_tf_crypto_deterministic_config'
require 'google/dlp/property/dt_config_info_type_tf_tf_primitive_tf_crypto_deterministic_config_context'
require 'google/dlp/property/dt_config_info_type_tf_tf_primitive_tf_crypto_deterministic_config_crypto_key'
require 'google/dlp/property/dt_config_info_type_tf_tf_primitive_tf_crypto_deterministic_config_crypto_key_kms_wrapped'
require 'google/dlp/property/dt_config_info_type_tf_tf_primitive_tf_crypto_deterministic_config_crypto_key_transient'
require 'google/dlp/property/dt_config_info_type_tf_tf_primitive_tf_crypto_deterministic_config_crypto_key_unwrapped'
require 'google/dlp/property/dt_config_info_type_tf_tf_primitive_tf_crypto_deterministic_config_surrogate_info_type'
require 'google/dlp/property/dt_config_info_type_tf_tf_primitive_tf_crypto_replace_ffx_fpe_config'
require 'google/dlp/property/dt_config_info_type_tf_tf_primitive_tf_crypto_replace_ffx_fpe_config_context'
require 'google/dlp/property/dt_config_info_type_tf_tf_primitive_tf_crypto_replace_ffx_fpe_config_crypto_key'
require 'google/dlp/property/dt_config_info_type_tf_tf_primitive_tf_crypto_replace_ffx_fpe_config_crypto_key_kms_wrapped'
require 'google/dlp/property/dt_config_info_type_tf_tf_primitive_tf_crypto_replace_ffx_fpe_config_crypto_key_transient'
require 'google/dlp/property/dt_config_info_type_tf_tf_primitive_tf_crypto_replace_ffx_fpe_config_crypto_key_unwrapped'
require 'google/dlp/property/dt_config_info_type_tf_tf_primitive_tf_crypto_replace_ffx_fpe_config_surrogate_info_type'
require 'google/dlp/property/dt_config_info_type_tf_tf_primitive_tf_replace_config'
require 'google/dlp/property/dt_config_info_type_tf_tf_primitive_tf_replace_config_new_value'
require 'google/dlp/property/dt_config_info_type_tf_tf_primitive_tf_replace_config_new_value_date_value'
require 'google/dlp/property/dt_config_info_type_tf_tf_primitive_tf_replace_config_new_value_time_value'
module GoogleInSpec
  module DLP
    module Property
      class DTConfigInfoTypeTfTf
        attr_reader :info_types

        attr_reader :primitive_tf

        def initialize(args = nil, parent_identifier = nil)
          return if args.nil?
          @parent_identifier = parent_identifier
          @info_types = GoogleInSpec::DLP::Property::DTConfigInfoTypeTfTfInfoTypesArray.parse(args['infoTypes'], to_s)
          @primitive_tf = GoogleInSpec::DLP::Property::DTConfigInfoTypeTfTfPrimitiveTf.new(args['primitiveTf'], to_s)
        end

        def to_s
          "#{@parent_identifier} DTConfigInfoTypeTfTf"
        end
      end

      class DTConfigInfoTypeTfTfArray
        def self.parse(value, parent_identifier)
          return if value.nil?
          return DTConfigInfoTypeTfTf.new(value, parent_identifier) unless value.is_a?(::Array)
          value.map { |v| DTConfigInfoTypeTfTf.new(v, parent_identifier) }
        end
      end
    end
  end
end
