# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'
class ComputeRegionUrlMaps < GcpResourceBase
  name 'google_compute_region_url_maps'
  desc 'RegionUrlMap plural resource'
  supports platform: 'gcp'

  attr_reader :table

  filter_table_config = FilterTable.create

  filter_table_config.add(:kinds, field: :kind)
  filter_table_config.add(:ids, field: :id)
  filter_table_config.add(:creation_timestamps, field: :creation_timestamp)
  filter_table_config.add(:names, field: :name)
  filter_table_config.add(:descriptions, field: :description)
  filter_table_config.add(:self_links, field: :self_link)
  filter_table_config.add(:host_rules, field: :host_rules)
  filter_table_config.add(:path_matchers, field: :path_matchers)
  filter_table_config.add(:tests, field: :tests)
  filter_table_config.add(:default_services, field: :default_service)
  filter_table_config.add(:default_route_actions, field: :default_route_action)
  filter_table_config.add(:default_url_redirects, field: :default_url_redirect)
  filter_table_config.add(:header_actions, field: :header_action)
  filter_table_config.add(:default_custom_error_response_policies, field: :default_custom_error_response_policy)
  filter_table_config.add(:fingerprints, field: :fingerprint)
  filter_table_config.add(:regions, field: :region)

  filter_table_config.connect(self, :table)

  def initialize(params = {})
    super(params.merge({ use_http_transport: true }))
    @params = params
    @table = fetch_wrapped_resource('items')
  end

  def fetch_wrapped_resource(wrap_path)
    # fetch_resource returns an array of responses (to handle pagination)
    result = @connection.fetch_all(product_url, resource_base_url, @params, 'Get')
    return if result.nil?

    # Conversion of string -> object hash to symbol -> object hash that InSpec needs
    converted = []
    result.each do |response|
      next if response.nil? || !response.key?(wrap_path)
      response[wrap_path].each do |hash|
        hash_with_symbols = {}
        hash.each_key do |key|
          name, value = transform(key, hash)
          hash_with_symbols[name] = value
        end
        converted.push(hash_with_symbols)
      end
    end

    converted
  end

  def transform(key, value)
    return transformers[key].call(value) if transformers.key?(key)

    [key.to_sym, value]
  end

  def transformers
    {
      'kind' => ->(obj) { [:kind, obj['kind']] },
      'id' => ->(obj) { [:id, obj['id']] },
      'creationTimestamp' => ->(obj) { [:creation_timestamp, obj['creationTimestamp']] },
      'name' => ->(obj) { [:name, obj['name']] },
      'description' => ->(obj) { [:description, obj['description']] },
      'selfLink' => ->(obj) { [:self_link, obj['selfLink']] },
      'hostRules' => ->(obj) { [:host_rules, GoogleInSpec::Compute::Property::RegionUrlMapHostRulesArray.parse(obj['hostRules'], to_s)] },
      'pathMatchers' => ->(obj) { [:path_matchers, GoogleInSpec::Compute::Property::RegionUrlMapPathMatchersArray.parse(obj['pathMatchers'], to_s)] },
      'tests' => ->(obj) { [:tests, GoogleInSpec::Compute::Property::RegionUrlMapTestsArray.parse(obj['tests'], to_s)] },
      'defaultService' => ->(obj) { [:default_service, obj['defaultService']] },
      'defaultRouteAction' => ->(obj) { [:default_route_action, GoogleInSpec::Compute::Property::RegionUrlMapDefaultRouteAction.new(obj['defaultRouteAction'], to_s)] },
      'defaultUrlRedirect' => ->(obj) { [:default_url_redirect, GoogleInSpec::Compute::Property::RegionUrlMapDefaultUrlRedirect.new(obj['defaultUrlRedirect'], to_s)] },
      'headerAction' => ->(obj) { [:header_action, GoogleInSpec::Compute::Property::RegionUrlMapHeaderAction.new(obj['headerAction'], to_s)] },
      'defaultCustomErrorResponsePolicy' => ->(obj) { [:default_custom_error_response_policy, GoogleInSpec::Compute::Property::RegionUrlMapDefaultCustomErrorResponsePolicy.new(obj['defaultCustomErrorResponsePolicy'], to_s)] },
      'fingerprint' => ->(obj) { [:fingerprint, obj['fingerprint']] },
      'region' => ->(obj) { [:region, obj['region']] },
    }
  end

  private

  def product_url(_ = nil)
    'https://compute.googleapis.com/compute/v1/'
  end

  def resource_base_url
    'projects/{{project}}/regions/{{region}}/urlMaps'
  end
end
