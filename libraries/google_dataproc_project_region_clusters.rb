# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'
class DataprocProjectRegionClusters < GcpResourceBase
  name 'google_dataproc_project_region_clusters'
  desc 'ProjectRegionCluster plural resource'
  supports platform: 'gcp'

  attr_reader :table

  filter_table_config = FilterTable.create

  filter_table_config.add(:project_ids, field: :project_id)
  filter_table_config.add(:cluster_names, field: :cluster_name)
  filter_table_config.add(:configs, field: :config)
  filter_table_config.add(:virtual_cluster_configs, field: :virtual_cluster_config)
  filter_table_config.add(:labels, field: :labels)
  filter_table_config.add(:statuses, field: :status)
  filter_table_config.add(:status_histories, field: :status_history)
  filter_table_config.add(:cluster_uuids, field: :cluster_uuid)
  filter_table_config.add(:metrics, field: :metrics)

  filter_table_config.connect(self, :table)

  def initialize(params = {})
    super(params.merge({ use_http_transport: true }))
    @params = params
    @table = fetch_wrapped_resource('projectRegionClusters')
  end

  def fetch_wrapped_resource(wrap_path)
    # fetch_resource returns an array of responses (to handle pagination)
    result = @connection.fetch_all(product_url, resource_base_url, @params, 'Get')
    return if result.nil?

    # Conversion of string -> object hash to symbol -> object hash that InSpec needs
    converted = []
    result.each do |response|
      next if response.nil? || !response.key?(wrap_path)
      response[wrap_path].each do |hash|
        hash_with_symbols = {}
        hash.each_key do |key|
          name, value = transform(key, hash)
          hash_with_symbols[name] = value
        end
        converted.push(hash_with_symbols)
      end
    end

    converted
  end

  def transform(key, value)
    return transformers[key].call(value) if transformers.key?(key)

    [key.to_sym, value]
  end

  def transformers
    {
      'projectId' => ->(obj) { return :project_id, obj['projectId'] },
      'clusterName' => ->(obj) { return :cluster_name, obj['clusterName'] },
      'config' => ->(obj) { return :config, obj['config'] },
      'virtualClusterConfig' => ->(obj) { return :virtual_cluster_config, obj['virtualClusterConfig'] },
      'labels' => ->(obj) { return :labels, GoogleInSpec::Dataproc::Property::ProjectRegionClusterLabels.new(obj['labels'], to_s) },
      'status' => ->(obj) { return :status, obj['status'] },
      'statusHistory' => ->(obj) { return :status_history, obj['statusHistory'] },
      'clusterUuid' => ->(obj) { return :cluster_uuid, obj['clusterUuid'] },
      'metrics' => ->(obj) { return :metrics, obj['metrics'] },
    }
  end

  private

  def product_url(_ = nil)
    'https://dataproc.googleapis.com/v1/'
  end

  def resource_base_url
    'projects/{{projectId}}/regions/{{region}}/clusters'
  end
end
