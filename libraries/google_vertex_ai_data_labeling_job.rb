# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'
require 'google/vertexai/property/datalabelingjob_active_learning_config'
require 'google/vertexai/property/datalabelingjob_active_learning_config_sample_config'
require 'google/vertexai/property/datalabelingjob_active_learning_config_training_config'
require 'google/vertexai/property/datalabelingjob_annotation_labels'
require 'google/vertexai/property/datalabelingjob_current_spend'
require 'google/vertexai/property/datalabelingjob_encryption_spec'
require 'google/vertexai/property/datalabelingjob_error'
require 'google/vertexai/property/datalabelingjob_labels'

# A provider to manage Vertex AI resources.
class VertexAIDataLabelingJob < GcpResourceBase
  name 'google_vertex_ai_data_labeling_job'
  desc 'DataLabelingJob'
  supports platform: 'gcp'

  attr_reader :params
  attr_reader :labeling_progress
  attr_reader :create_time
  attr_reader :encryption_spec
  attr_reader :inputs_schema_uri
  attr_reader :labeler_count
  attr_reader :error
  attr_reader :inputs
  attr_reader :instruction_uri
  attr_reader :update_time
  attr_reader :annotation_labels
  attr_reader :name
  attr_reader :current_spend
  attr_reader :specialist_pools
  attr_reader :display_name
  attr_reader :state
  attr_reader :datasets
  attr_reader :labels
  attr_reader :active_learning_config

  def initialize(params)
    super(params.merge({ use_http_transport: true }))
    @params = params
    @fetched = @connection.fetch(product_url(params[:beta]), resource_base_url, params, 'Get')
    parse unless @fetched.nil?
  end

  def parse
    @labeling_progress = @fetched['labelingProgress']
    @create_time = @fetched['createTime']
    @encryption_spec = GoogleInSpec::VertexAI::Property::DataLabelingJobEncryptionSpec.new(@fetched['encryptionSpec'], to_s)
    @inputs_schema_uri = @fetched['inputsSchemaUri']
    @labeler_count = @fetched['labelerCount']
    @error = GoogleInSpec::VertexAI::Property::DataLabelingJobError.new(@fetched['error'], to_s)
    @inputs = @fetched['inputs']
    @instruction_uri = @fetched['instructionUri']
    @update_time = @fetched['updateTime']
    @annotation_labels = GoogleInSpec::VertexAI::Property::DataLabelingJobAnnotationLabels.new(@fetched['annotationLabels'], to_s)
    @name = @fetched['name']
    @current_spend = GoogleInSpec::VertexAI::Property::DataLabelingJobCurrentSpend.new(@fetched['currentSpend'], to_s)
    @specialist_pools = @fetched['specialistPools']
    @display_name = @fetched['displayName']
    @state = @fetched['state']
    @datasets = @fetched['datasets']
    @labels = GoogleInSpec::VertexAI::Property::DataLabelingJobLabels.new(@fetched['labels'], to_s)
    @active_learning_config = GoogleInSpec::VertexAI::Property::DataLabelingJobActiveLearningConfig.new(@fetched['activeLearningConfig'], to_s)
  end

  def exists?
    !@fetched.nil?
  end

  def to_s
    "DataLabelingJob #{@params[:name]}"
  end

  private

  def product_url(_ = nil)
    'https://{{region}}-aiplatform.googleapis.com/v1/'
  end

  def resource_base_url
    '{{name}}'
  end
end
