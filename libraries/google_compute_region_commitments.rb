# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'
class ComputeRegionCommitments < GcpResourceBase
  name 'google_compute_region_commitments'
  desc 'RegionCommitment plural resource'
  supports platform: 'gcp'

  attr_reader :table

  filter_table_config = FilterTable.create

  filter_table_config.add(:kinds, field: :kind)
  filter_table_config.add(:ids, field: :id)
  filter_table_config.add(:creation_timestamps, field: :creation_timestamp)
  filter_table_config.add(:names, field: :name)
  filter_table_config.add(:descriptions, field: :description)
  filter_table_config.add(:regions, field: :region)
  filter_table_config.add(:self_links, field: :self_link)
  filter_table_config.add(:self_link_with_ids, field: :self_link_with_id)
  filter_table_config.add(:statuses, field: :status)
  filter_table_config.add(:status_messages, field: :status_message)
  filter_table_config.add(:plans, field: :plan)
  filter_table_config.add(:start_timestamps, field: :start_timestamp)
  filter_table_config.add(:end_timestamps, field: :end_timestamp)
  filter_table_config.add(:resources, field: :resources)
  filter_table_config.add(:types, field: :type)
  filter_table_config.add(:reservations, field: :reservations)
  filter_table_config.add(:categories, field: :category)
  filter_table_config.add(:license_resources, field: :license_resource)
  filter_table_config.add(:auto_renews, field: :auto_renew)
  filter_table_config.add(:merge_source_commitments, field: :merge_source_commitments)
  filter_table_config.add(:split_source_commitments, field: :split_source_commitment)
  filter_table_config.add(:resource_statuses, field: :resource_status)
  filter_table_config.add(:existing_reservations, field: :existing_reservations)

  filter_table_config.connect(self, :table)

  def initialize(params = {})
    super(params.merge({ use_http_transport: true }))
    @params = params
    @table = fetch_wrapped_resource('items')
  end

  def fetch_wrapped_resource(wrap_path)
    # fetch_resource returns an array of responses (to handle pagination)
    result = @connection.fetch_all(product_url, resource_base_url, @params, 'Get')
    return if result.nil?

    # Conversion of string -> object hash to symbol -> object hash that InSpec needs
    converted = []
    result.each do |response|
      next if response.nil? || !response.key?(wrap_path)
      response[wrap_path].each do |hash|
        hash_with_symbols = {}
        hash.each_key do |key|
          name, value = transform(key, hash)
          hash_with_symbols[name] = value
        end
        converted.push(hash_with_symbols)
      end
    end

    converted
  end

  def transform(key, value)
    return transformers[key].call(value) if transformers.key?(key)

    [key.to_sym, value]
  end

  def transformers
    {
      'kind' => ->(obj) { [:kind, obj['kind']] },
      'id' => ->(obj) { [:id, obj['id']] },
      'creationTimestamp' => ->(obj) { [:creation_timestamp, obj['creationTimestamp']] },
      'name' => ->(obj) { [:name, obj['name']] },
      'description' => ->(obj) { [:description, obj['description']] },
      'region' => ->(obj) { [:region, obj['region']] },
      'selfLink' => ->(obj) { [:self_link, obj['selfLink']] },
      'selfLinkWithId' => ->(obj) { [:self_link_with_id, obj['selfLinkWithId']] },
      'status' => ->(obj) { [:status, obj['status']] },
      'statusMessage' => ->(obj) { [:status_message, obj['statusMessage']] },
      'plan' => ->(obj) { [:plan, obj['plan']] },
      'startTimestamp' => ->(obj) { [:start_timestamp, obj['startTimestamp']] },
      'endTimestamp' => ->(obj) { [:end_timestamp, obj['endTimestamp']] },
      'resources' => ->(obj) { [:resources, GoogleInSpec::Compute::Property::RegionCommitmentResourcesArray.parse(obj['resources'], to_s)] },
      'type' => ->(obj) { [:type, obj['type']] },
      'reservations' => ->(obj) { [:reservations, GoogleInSpec::Compute::Property::RegionCommitmentReservationsArray.parse(obj['reservations'], to_s)] },
      'category' => ->(obj) { [:category, obj['category']] },
      'licenseResource' => ->(obj) { [:license_resource, GoogleInSpec::Compute::Property::RegionCommitmentLicenseResource.new(obj['licenseResource'], to_s)] },
      'autoRenew' => ->(obj) { [:auto_renew, obj['autoRenew']] },
      'mergeSourceCommitments' => ->(obj) { [:merge_source_commitments, obj['mergeSourceCommitments']] },
      'splitSourceCommitment' => ->(obj) { [:split_source_commitment, obj['splitSourceCommitment']] },
      'resourceStatus' => ->(obj) { [:resource_status, GoogleInSpec::Compute::Property::RegionCommitmentResourceStatus.new(obj['resourceStatus'], to_s)] },
      'existingReservations' => ->(obj) { [:existing_reservations, obj['existingReservations']] },
    }
  end

  private

  def product_url(_ = nil)
    'https://compute.googleapis.com/compute/v1/'
  end

  def resource_base_url
    'projects/{{project}}/regions/{{region}}/commitments'
  end
end
