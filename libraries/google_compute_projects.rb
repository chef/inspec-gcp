# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'
class ComputeProjects < GcpResourceBase
  name 'google_compute_projects'
  desc 'Project plural resource'
  supports platform: 'gcp'

  attr_reader :table

  filter_table_config = FilterTable.create

  filter_table_config.add(:kinds, field: :kind)
  filter_table_config.add(:ids, field: :id)
  filter_table_config.add(:creation_timestamps, field: :creation_timestamp)
  filter_table_config.add(:names, field: :name)
  filter_table_config.add(:descriptions, field: :description)
  filter_table_config.add(:common_instance_metadata, field: :common_instance_metadata)
  filter_table_config.add(:quotas, field: :quotas)
  filter_table_config.add(:usage_export_locations, field: :usage_export_location)
  filter_table_config.add(:enabled_features, field: :enabled_features)
  filter_table_config.add(:self_links, field: :self_link)
  filter_table_config.add(:default_service_accounts, field: :default_service_account)
  filter_table_config.add(:xpn_project_statuses, field: :xpn_project_status)
  filter_table_config.add(:default_network_tiers, field: :default_network_tier)
  filter_table_config.add(:vm_dns_settings, field: :vm_dns_setting)

  filter_table_config.connect(self, :table)

  def initialize(params = {})
    super(params.merge({ use_http_transport: true }))
    @params = params
    @table = fetch_wrapped_resource('projects')
  end

  def fetch_wrapped_resource(wrap_path)
    # fetch_resource returns an array of responses (to handle pagination)
    result = @connection.fetch_all(product_url, resource_base_url, @params, 'Get')
    return if result.nil?

    # Conversion of string -> object hash to symbol -> object hash that InSpec needs
    converted = []
    result.each do |response|
      next if response.nil? || !response.key?(wrap_path)
      response[wrap_path].each do |hash|
        hash_with_symbols = {}
        hash.each_key do |key|
          name, value = transform(key, hash)
          hash_with_symbols[name] = value
        end
        converted.push(hash_with_symbols)
      end
    end

    converted
  end

  def transform(key, value)
    return transformers[key].call(value) if transformers.key?(key)

    [key.to_sym, value]
  end

  def transformers
    {
      'kind' => ->(obj) { return :kind, obj['kind'] },
      'id' => ->(obj) { return :id, obj['id'] },
      'creationTimestamp' => ->(obj) { return :creation_timestamp, obj['creationTimestamp'] },
      'name' => ->(obj) { return :name, obj['name'] },
      'description' => ->(obj) { return :description, obj['description'] },
      'commonInstanceMetadata' => ->(obj) { return :common_instance_metadata, GoogleInSpec::Compute::Property::ProjectCommonInstanceMetadata.new(obj['commonInstanceMetadata'], to_s) },
      'quotas' => ->(obj) { return :quotas, GoogleInSpec::Compute::Property::ProjectQuotasArray.parse(obj['quotas'], to_s) },
      'usageExportLocation' => ->(obj) { return :usage_export_location, GoogleInSpec::Compute::Property::ProjectUsageExportLocation.new(obj['usageExportLocation'], to_s) },
      'enabledFeatures' => ->(obj) { return :enabled_features, obj['enabledFeatures'] },
      'selfLink' => ->(obj) { return :self_link, obj['selfLink'] },
      'defaultServiceAccount' => ->(obj) { return :default_service_account, obj['defaultServiceAccount'] },
      'xpnProjectStatus' => ->(obj) { return :xpn_project_status, obj['xpnProjectStatus'] },
      'defaultNetworkTier' => ->(obj) { return :default_network_tier, obj['defaultNetworkTier'] },
      'vmDnsSetting' => ->(obj) { return :vm_dns_setting, obj['vmDnsSetting'] },
    }
  end

  private

  def product_url(_ = nil)
    'https://compute.googleapis.com/compute/v1/'
  end

  def resource_base_url
    ''
  end
end
