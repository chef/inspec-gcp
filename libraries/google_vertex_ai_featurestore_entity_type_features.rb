# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'
class VertexAIFeaturestoreEntityTypeFeatures < GcpResourceBase
  name 'google_vertex_ai_featurestore_entity_type_features'
  desc 'FeaturestoreEntityTypeFeature plural resource'
  supports platform: 'gcp'

  attr_reader :table

  filter_table_config = FilterTable.create

  filter_table_config.add(:descriptions, field: :description)
  filter_table_config.add(:create_times, field: :create_time)
  filter_table_config.add(:monitoring_stats_anomalies, field: :monitoring_stats_anomalies)
  filter_table_config.add(:etags, field: :etag)
  filter_table_config.add(:labels, field: :labels)
  filter_table_config.add(:names, field: :name)
  filter_table_config.add(:update_times, field: :update_time)
  filter_table_config.add(:disable_monitorings, field: :disable_monitoring)
  filter_table_config.add(:value_types, field: :value_type)

  filter_table_config.connect(self, :table)

  def initialize(params = {})
    super(params.merge({ use_http_transport: true }))
    @params = params
    @table = fetch_wrapped_resource('features')
  end

  def fetch_wrapped_resource(wrap_path)
    # fetch_resource returns an array of responses (to handle pagination)
    result = @connection.fetch_all(product_url, resource_base_url, @params, 'Get')
    return if result.nil?

    # Conversion of string -> object hash to symbol -> object hash that InSpec needs
    converted = []
    result.each do |response|
      next if response.nil? || !response.key?(wrap_path)
      response[wrap_path].each do |hash|
        hash_with_symbols = {}
        hash.each_key do |key|
          name, value = transform(key, hash)
          hash_with_symbols[name] = value
        end
        converted.push(hash_with_symbols)
      end
    end

    converted
  end

  def transform(key, value)
    return transformers[key].call(value) if transformers.key?(key)

    [key.to_sym, value]
  end

  def transformers
    {
      'description' => ->(obj) { return :description, obj['description'] },
      'createTime' => ->(obj) { return :create_time, obj['createTime'] },
      'monitoringStatsAnomalies' => ->(obj) { return :monitoring_stats_anomalies, obj['monitoringStatsAnomalies'] },
      'etag' => ->(obj) { return :etag, obj['etag'] },
      'labels' => ->(obj) { return :labels, GoogleInSpec::VertexAI::Property::FeaturestoreEntityTypeFeatureLabels.new(obj['labels'], to_s) },
      'name' => ->(obj) { return :name, obj['name'] },
      'updateTime' => ->(obj) { return :update_time, obj['updateTime'] },
      'disableMonitoring' => ->(obj) { return :disable_monitoring, obj['disableMonitoring'] },
      'valueType' => ->(obj) { return :value_type, obj['valueType'] },
    }
  end

  private

  def product_url(_ = nil)
    'https://{{region}}-aiplatform.googleapis.com/v1/'
  end

  def resource_base_url
    '{{parent}}/features'
  end
end
