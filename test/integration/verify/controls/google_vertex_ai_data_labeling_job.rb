# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------

title 'Test GCP google_vertex_ai_data_labeling_job resource.'

gcp_project_id = input(:gcp_project_id, value: 'gcp_project_id', description: 'The GCP project identifier.')

  data_labeling_job = input('data_labeling_job', value: {
  "name": "value_name",
  "region": "value_region",
  "parent": "value_parent",
  "create_time": "value_createtime",
  "inputs_schema_uri": "value_inputsschemauri",
  "instruction_uri": "value_instructionuri",
  "update_time": "value_updatetime",
  "display_name": "value_displayname",
  "state": "value_state"
}, description: 'data_labeling_job description')
control 'google_vertex_ai_data_labeling_job-1.0' do
  impact 1.0
  title 'google_vertex_ai_data_labeling_job resource test'

  describe google_vertex_ai_data_labeling_job(name: "projects/#{gcp_project_id}/locations/#{data_labeling_job['region']}/dataLabelingJobs/#{data_labeling_job['name']}", region: data_labeling_job['region']) do
  it { should exist }
  	its('create_time') { should cmp data_labeling_job['create_time'] }
  	its('inputs_schema_uri') { should cmp data_labeling_job['inputs_schema_uri'] }
  	its('instruction_uri') { should cmp data_labeling_job['instruction_uri'] }
  	its('update_time') { should cmp data_labeling_job['update_time'] }
  	its('name') { should cmp data_labeling_job['name'] }
  	its('display_name') { should cmp data_labeling_job['display_name'] }
  	its('state') { should cmp data_labeling_job['state'] }

  end

  describe google_vertex_ai_data_labeling_job(name: "does_not_exit", region: data_labeling_job['region']) do
  	it { should_not exist }
  end
end
