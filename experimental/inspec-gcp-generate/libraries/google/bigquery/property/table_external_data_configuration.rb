# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'google/bigquery/property/table_external_data_configuration_bigtable_options'
require 'google/bigquery/property/table_external_data_configuration_bigtable_options_column_families'
require 'google/bigquery/property/table_external_data_configuration_csv_options'
require 'google/bigquery/property/table_external_data_configuration_google_sheets_options'
require 'google/bigquery/property/table_external_data_configuration_schema'
require 'google/bigquery/property/table_external_data_configuration_schema_fields'
module GoogleInSpec
  module BigQuery
    module Property
      class TableExternalDataConfiguration
        attr_reader :args

        attr_reader :autodetect

        attr_reader :compression

        attr_reader :ignore_unknown_values

        attr_reader :max_bad_records

        attr_reader :source_format

        attr_reader :source_uris

        attr_reader :schema

        attr_reader :google_sheets_options

        attr_reader :csv_options

        attr_reader :bigtable_options

        def initialize(args = nil, parent_identifier = nil)
          @args = args
          return if args.nil?
          @parent_identifier = parent_identifier
          @autodetect = args['autodetect']
          @compression = args['compression']
          @ignore_unknown_values = args['ignoreUnknownValues']
          @max_bad_records = args['maxBadRecords']
          @source_format = args['sourceFormat']
          @source_uris = args['sourceUris']
          @schema = GoogleInSpec::BigQuery::Property::TableExternalDataConfigurationSchema.new(args['schema'], to_s)
          @google_sheets_options = GoogleInSpec::BigQuery::Property::TableExternalDataConfigurationGoogleSheetsOptions.new(args['googleSheetsOptions'], to_s)
          @csv_options = GoogleInSpec::BigQuery::Property::TableExternalDataConfigurationCsvOptions.new(args['csvOptions'], to_s)
          @bigtable_options = GoogleInSpec::BigQuery::Property::TableExternalDataConfigurationBigtableOptions.new(args['bigtableOptions'], to_s)
        end

        def to_s
          "#{@parent_identifier} TableExternalDataConfiguration"
        end

        def self.un_parse(item, path)
          return if item.nil?
          way_to_parse = {
            'autodetect' => ->(x, path) { x.nil? ? [] : ["its('#{path}.autodetect') { should cmp #{x.inspect} }"] },
            'compression' => ->(x, path) { x.nil? ? [] : ["its('#{path}.compression') { should cmp #{x.inspect} }"] },
            'ignore_unknown_values' => ->(x, path) { x.nil? ? [] : ["its('#{path}.ignore_unknown_values') { should cmp #{x.inspect} }"] },
            'max_bad_records' => ->(x, path) { x.nil? ? [] : ["its('#{path}.max_bad_records') { should cmp #{x.inspect} }"] },
            'source_format' => ->(x, path) { x.nil? ? [] : ["its('#{path}.source_format') { should cmp #{x.inspect} }"] },
            'source_uris' => ->(x, path) { x.nil? ? [] : x.map { |single| "its('#{path}.source_uris') { should include #{single.inspect} }" } },
            'schema' => ->(x, path) { x.nil? ? [] : GoogleInSpec::BigQuery::Property::TableExternalDataConfigurationSchema.un_parse(x, "#{path}.schema") },
            'google_sheets_options' => ->(x, path) { x.nil? ? [] : GoogleInSpec::BigQuery::Property::TableExternalDataConfigurationGoogleSheetsOptions.un_parse(x, "#{path}.google_sheets_options") },
            'csv_options' => ->(x, path) { x.nil? ? [] : GoogleInSpec::BigQuery::Property::TableExternalDataConfigurationCsvOptions.un_parse(x, "#{path}.csv_options") },
            'bigtable_options' => ->(x, path) { x.nil? ? [] : GoogleInSpec::BigQuery::Property::TableExternalDataConfigurationBigtableOptions.un_parse(x, "#{path}.bigtable_options") },
          }
          way_to_parse.map do |k, v|
            v.call(item.method(k).call, path)
          end
        end

        def to_json
          @args.to_json
        end

        def self.from_json string
          data = JSON.load string
          self.new data
        end

        # other is a string representation of this object
        def ==(other)
          return @args == JSON.load(other)
        end
      end
    end
  end
end
