# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
module GoogleInSpec
  module Compute
    module Property
      class HealthCheckHttp2HealthCheck
        attr_reader :args

        attr_reader :host

        attr_reader :request_path

        attr_reader :response

        attr_reader :port

        attr_reader :port_name

        attr_reader :proxy_header

        attr_reader :port_specification

        def initialize(args = nil, parent_identifier = nil)
          @args = args
          return if args.nil?
          @parent_identifier = parent_identifier
          @host = args['host']
          @request_path = args['requestPath']
          @response = args['response']
          @port = args['port']
          @port_name = args['portName']
          @proxy_header = args['proxyHeader']
          @port_specification = args['portSpecification']
        end

        def to_s
          "#{@parent_identifier} HealthCheckHttp2HealthCheck"
        end

        def self.un_parse(item, path)
          return if item.nil?
          way_to_parse = {
            'host' => ->(x, path) { x.nil? ? [] : ["its('#{path}.host') { should cmp #{x.inspect} }"] },
            'request_path' => ->(x, path) { x.nil? ? [] : ["its('#{path}.request_path') { should cmp #{x.inspect} }"] },
            'response' => ->(x, path) { x.nil? ? [] : ["its('#{path}.response') { should cmp #{x.inspect} }"] },
            'port' => ->(x, path) { x.nil? ? [] : ["its('#{path}.port') { should cmp #{x.inspect} }"] },
            'port_name' => ->(x, path) { x.nil? ? [] : ["its('#{path}.port_name') { should cmp #{x.inspect} }"] },
            'proxy_header' => ->(x, path) { x.nil? ? [] : ["its('#{path}.proxy_header') { should cmp #{x.inspect} }"] },
            'port_specification' => ->(x, path) { x.nil? ? [] : ["its('#{path}.port_specification') { should cmp #{x.inspect} }"] },
          }
          way_to_parse.map do |k, v|
            v.call(item.method(k).call, path)
          end
        end

        def to_json
          @args.to_json
        end

        def self.from_json string
          data = JSON.load string
          self.new data
        end

        # other is a string representation of this object
        def ==(other)
          return @args == JSON.load(other)
        end
      end
    end
  end
end
